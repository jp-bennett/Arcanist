using ArcaneTide.Utils;
using ArcaneTide.Components;
using Kingmaker.Blueprints.Classes;
using Kingmaker.Blueprints.Classes.Selection;
using Kingmaker.Blueprints.Facts;
using Kingmaker.Localization;
using Kingmaker.UnitLogic.Abilities.Blueprints;
using Kingmaker.UnitLogic.ActivatableAbilities;
using Kingmaker.UnitLogic.Buffs.Blueprints;
using Kingmaker.UnitLogic.Commands.Base;
using Kingmaker.UnitLogic.FactLogic;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Kingmaker.UnitLogic.Abilities.Components;
using Kingmaker.Blueprints.Classes.Spells;
using Kingmaker.UnitLogic;
using Kingmaker.Blueprints;
using Kingmaker.ElementsSystem;

namespace ArcaneTide.Arcanist {
    static class ArcaneExploits {
        static public BlueprintFeature potentMagic,metaMixing,fastStudy;
        static public BlueprintFeatureSelection exploitSelection;
        static public bool loaded = false;
        static public void Load() {
            
            potentMagic = PotentMagic.Create();
            metaMixing = Metamixing.Create();
            fastStudy = FastStudy.Create();
            List<BlueprintFeature> feats = new List<BlueprintFeature>();
            feats = (new BlueprintFeature[] { potentMagic, metaMixing,fastStudy }).ToList<BlueprintFeature>();

            exploitSelection = Helpers.CreateFeatureSelection("ArcanistClassExploitFeatureSelection", "", "",
                "b9e8c9196f14ffb7d1d5b9b17bfa8bbe",
                IconSet.wizard_feat_selection,
                FeatureGroup.None);
            exploitSelection.SetName(Helpers.CreateString("ArcanistClass.Exploit.FeatureSelection.Name"));
            exploitSelection.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.FeatureSelection.Desc"));
            exploitSelection.SetFeatures(feats);
            loaded = true;
        }
    }
    static class PotentMagic{
        static public BlueprintFeature exploit;
        static public BlueprintFeature Create() {
            BlueprintFeature feat = Helpers.CreateFeature("ArcanistClassExploitPM", "", "",
                "66cbd336c0cd2adbb8404567867d545f",//MD5-32[ArcanistClass.Exploit.PotentMagic]
                IconSet.spell_strike_icon,
                FeatureGroup.None);
            feat.SetName(Helpers.CreateString("ArcanistClass.Exploit.PotentMagic.Name"));
            feat.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.PotentMagic.Desc"));
            exploit = feat;
            return feat;
        }

    }

    static class Metamixing {
        static public BlueprintFeature exploit;
        static public BlueprintBuff buff;
        static internal BlueprintActivatableAbility abl;
        static public BlueprintFeature Create() {
            LocalizedString name = Helpers.CreateString("ArcanistClass.Exploit.Metamixing.Name");
            LocalizedString desc = Helpers.CreateString("ArcanistClass.Exploit.Metamixing.Desc");
            buff = Helpers.CreateBuff("ArcanistClassExploitMetamixingOnBuff", "", "",
                "394cd08033b73c5159a745077c28f7e6", //MD5-32[ArcanistClass.Exploit.Metamixing.OnBuff]
                IconSet.spell_strike_icon, null);
            buff.SetName(name);
            buff.SetDescription(desc);

            abl = Helpers.CreateActivatableAbility("ArcanistClassExploitMetamixingActiAbl", "", "",
                "6f45e966f1b25e3fdf2d3005bdce1288",//MD5-32[ArcanistClass.Exploit.Metamixing.ActiAbl]
                IconSet.spell_strike_icon,
                buff,
                AbilityActivationType.Immediately,
                UnitCommand.CommandType.Free,
                null);
            abl.SetName(name);
            abl.SetDescription(desc);

            BlueprintFeature feat = Helpers.CreateFeature("ArcanistClassExploitPM", "", "",
                "e1a1e094774fa416fbc25ee3a8a87144",//MD5-32[ArcanistClass.Exploit.Metamixing]
                IconSet.spell_strike_icon,
                FeatureGroup.None,
                Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { abl }));
            feat.SetName(name);
            feat.SetDescription(desc);
            exploit = feat;
            return feat;
        }
    }

    static class FastStudy {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintAbility abl;
        static public BlueprintFeature exploit;
        static internal BlueprintBuff flagBuff;
        static internal Dictionary<SpellSchool, BlueprintAbility> schoolMasterAbls = new Dictionary<SpellSchool, BlueprintAbility>();
        static public BlueprintFeature Create() {
            LocalizedString loc_name = Helpers.CreateString("ArcanistClass.Exploit.FastStudy.Name");
            LocalizedString loc_desc = Helpers.CreateString("ArcanistClass.Exploit.FastStudy.Desc");
            flagBuff = Helpers.CreateBuff("ArcanistClassExploitFastStudyFlagBuff", "", "",
                OtherUtils.GetMd5("ArcanistClassExploitFastStudyFlagBuff"), null, null);
            flagBuff.SetBuffFlags(flagBuff.GetBuffFlags() | BuffFlags.HiddenInUi);

            FastStudyComponent comp = Helpers.Create<FastStudyComponent>();
            comp.flagBuff = flagBuff;
            AbilityResourceLogic comp_res = Helpers.Create<AbilityResourceLogic>();
            comp_res.RequiredResource = ArcaneReservoir.resource;
            comp_res.Amount = 1;
            comp_res.CostIsCustom = false;
            comp_res.IsSpendResource = true;
            AbilityRequirementBuff comp_req = Helpers.Create<AbilityRequirementBuff>();
            comp_req.buff = flagBuff;
            comp_req.Not = true;

            abl = Helpers.CreateAbility("ArcanistClassExploitFastStudyAbl", "", "",
                "da065b40cce4563648f5564c9c55aec5",//MD5-32[ArcanistClass.Exploit.FastStudy.Abl]
                IconSet.itembond_icon,
                AbilityType.Supernatural,
                UnitCommand.CommandType.Standard,
                AbilityRange.Personal,
                "", "",
                comp, comp_res);
            abl.SetName(loc_name);
            abl.SetDescription(loc_desc);
            abl.LocalizedDuration = PresetLocStrings.loc_instant;
            abl.LocalizedSavingThrow = PresetLocStrings.save_will_noharm;

            exploit = Helpers.CreateFeature("ArcanistClassExploitFastStudyFeat", "", "",
                "ed15c20bdbbd5bc16a635e5339fe0c6a",//MD5-32[ArcanistClass.Exploit.FastStudy.Feat]
                IconSet.itembond_icon,
                FeatureGroup.None,
                Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { abl }));
            exploit.SetName(loc_name);
            exploit.SetDescription(loc_desc);

            CreateSchoolMasterAbls();
            return exploit;
        }
        static public void CreateSchoolMasterAbls() {
            foreach(SpellSchool sc in Enum.GetValues(typeof(SpellSchool))) {
                if (sc == SpellSchool.None) continue;
                string name = $"ArcanistClassExploitFastStudy{OtherUtils.GetSchoolStr(sc)}MasterAbl";
                BlueprintAbility abl = Helpers.CreateAbility(name, "", "",
                    OtherUtils.GetMd5(name),
                    IconSet.school_icons[sc],
                    AbilityType.Special,
                    UnitCommand.CommandType.Free,
                    AbilityRange.Personal,
                    "", "");
                abl.SetName(Helpers.CreateString($"ArcanistClass.Exploit.FastStudy.{OtherUtils.GetSchoolStr(sc)}MasterAbl.Name"));
                //abl.SetDescription(Helpers.CreateString($"ArcanistClass.Exploit.FastStudy.{OtherUtils.GetSchoolStr(sc)}MasterAbl.Desc"));
                abl.LocalizedDuration = PresetLocStrings.loc_instant;
                abl.LocalizedSavingThrow = PresetLocStrings.save_none;

                schoolMasterAbls[sc] = abl;
            }
            
        }
        static public void AddMasterAbls(UnitDescriptor unit) {
            foreach(var kv in schoolMasterAbls) {
                if(kv.Value.ComponentsArray.Length > 0)unit.AddFact(kv.Value);
            }
        }
        static public void RemoveMasterAbls(UnitDescriptor unit) {
            foreach(var kv in schoolMasterAbls) {
                if (unit.HasFact(kv.Value)) {
                    unit.RemoveFact(kv.Value);
                }
            }
        }

        static public void RefreshSubAbls(Spellbook spellbook, int spellLevel) {
            Dictionary<SpellSchool, List<BlueprintAbility>> allVariants = new Dictionary<SpellSchool, List<BlueprintAbility>>();
            List<BlueprintAbility> spellsAdded = new List<BlueprintAbility>();
            foreach (var kv in schoolMasterAbls) {
                var abl = kv.Value;
                abl.SetComponents(new BlueprintComponent[] { });
                allVariants[kv.Key] = new List<BlueprintAbility>();
            }
            
            foreach (var spell in spellbook.GetKnownSpells(spellLevel)) {
                SpellSchool sc = spell.Blueprint.School;
                if (sc == SpellSchool.None) continue;

                FastStudyMemorizeAction actn = Helpers.Create<FastStudyMemorizeAction>();
                actn.spell = spell;
                actn.spellbook = spellbook;
                AbilityEffectRunAction comp = Helpers.Create<AbilityEffectRunAction>();
                comp.Actions = new ActionList {
                    Actions = new GameAction[] { actn }
                };
                string abl_i_name = $"ArcanistClassExploitFastStudy_Spell{spell.Blueprint.AssetGuid}";
                BlueprintAbility abl_i;
                if (library.BlueprintsByAssetId.ContainsKey(OtherUtils.GetMd5(abl_i_name))) {
                    abl_i = library.Get<BlueprintAbility>(OtherUtils.GetMd5(abl_i_name));
                }
                else {
                    abl_i = Helpers.CreateAbility(abl_i_name, "", "",
                        OtherUtils.GetMd5(abl_i_name), spell.Blueprint.Icon,
                        AbilityType.Extraordinary,
                        UnitCommand.CommandType.Free,
                        AbilityRange.Personal,
                        "", "", comp);
                }
                abl_i.SetName(spell.Blueprint.Name);
                abl_i.SetDescription(spell.Blueprint.Description);
                abl_i.LocalizedDuration = spell.Blueprint.LocalizedDuration;
                abl_i.LocalizedSavingThrow = spell.Blueprint.LocalizedSavingThrow;
                allVariants[sc].Add(abl_i);
            }

            foreach(var kv in schoolMasterAbls) {
                var abl = kv.Value;
                SpellSchool sc = kv.Key;
                if (allVariants[sc].Count > 0) {
                    abl.AddComponent(abl.CreateAbilityVariants(allVariants[sc]));
                }
            }
        }
    }
 
}
