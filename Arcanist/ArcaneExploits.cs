using ArcaneTide.Utils;
using Kingmaker.Blueprints.Classes;
using Kingmaker.Blueprints.Classes.Selection;
using Kingmaker.Blueprints.Facts;
using Kingmaker.Localization;
using Kingmaker.UnitLogic.ActivatableAbilities;
using Kingmaker.UnitLogic.Buffs.Blueprints;
using Kingmaker.UnitLogic.Commands.Base;
using Kingmaker.UnitLogic.FactLogic;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArcaneTide.Arcanist {
    static class ArcaneExploits {
        static public BlueprintFeature potentMagic,metaMixing;
        static public BlueprintFeatureSelection exploitSelection;
        static public bool loaded = false;
        static public void Load() {
            
            potentMagic = PotentMagic.Create();
            metaMixing = Metamixing.Create();
            List<BlueprintFeature> feats = new List<BlueprintFeature>();
            feats = (new BlueprintFeature[] { potentMagic, metaMixing }).ToList<BlueprintFeature>();

            exploitSelection = Helpers.CreateFeatureSelection("ArcanistClassExploitFeatureSelection", "", "",
                "b9e8c9196f14ffb7d1d5b9b17bfa8bbe",
                IconSet.vanish_icon,
                FeatureGroup.None);
            exploitSelection.SetName(Helpers.CreateString("ArcanistClass.Exploit.FeatureSelection.Name"));
            exploitSelection.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.FeatureSelection.Desc"));
            exploitSelection.SetFeatures(feats);
            loaded = true;
        }
    }
    static class PotentMagic{
        static public BlueprintFeature exploit;
        static public BlueprintFeature Create() {
            BlueprintFeature feat = Helpers.CreateFeature("ArcanistClassExploitPM", "", "",
                "66cbd336c0cd2adbb8404567867d545f",//MD5-32[ArcanistClass.Exploit.PotentMagic]
                IconSet.spell_strike_icon,
                FeatureGroup.None);
            feat.SetName(Helpers.CreateString("ArcanistClass.Exploit.PotentMagic.Name"));
            feat.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.PotentMagic.Desc"));
            exploit = feat;
            return feat;
        }

    }

    static class Metamixing {
        static public BlueprintFeature exploit;
        static public BlueprintBuff buff;
        static internal BlueprintActivatableAbility abl;
        static public BlueprintFeature Create() {
            LocalizedString name = Helpers.CreateString("ArcanistClass.Exploit.Metamixing.Name");
            LocalizedString desc = Helpers.CreateString("ArcanistClass.Exploit.Metamixing.Desc");
            buff = Helpers.CreateBuff("ArcanistClassExploitMetamixingOnBuff", "", "",
                "394cd08033b73c5159a745077c28f7e6", //MD5-32[ArcanistClass.Exploit.Metamixing.OnBuff]
                IconSet.spell_strike_icon, null);
            buff.SetName(name);
            buff.SetDescription(desc);

            abl = Helpers.CreateActivatableAbility("ArcanistClassExploitMetamixingActiAbl", "", "",
                "6f45e966f1b25e3fdf2d3005bdce1288",//MD5-32[ArcanistClass.Exploit.Metamixing.ActiAbl]
                IconSet.spell_strike_icon,
                buff,
                AbilityActivationType.Immediately,
                UnitCommand.CommandType.Free,
                null);
            abl.SetName(name);
            abl.SetDescription(desc);

            BlueprintFeature feat = Helpers.CreateFeature("ArcanistClassExploitPM", "", "",
                "e1a1e094774fa416fbc25ee3a8a87144",//MD5-32[ArcanistClass.Exploit.Metamixing]
                IconSet.spell_strike_icon,
                FeatureGroup.None,
                Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { abl }));
            feat.SetName(name);
            feat.SetDescription(desc);
            exploit = feat;
            return feat;
        }
    }

 
}
