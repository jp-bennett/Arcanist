using ArcaneTide.Utils;
using ArcaneTide.Components;
using Kingmaker.Blueprints.Classes;
using Kingmaker.Blueprints.Classes.Selection;
using Kingmaker.Blueprints.Facts;
using Kingmaker.Localization;
using Kingmaker.UnitLogic.Abilities.Blueprints;
using Kingmaker.UnitLogic.ActivatableAbilities;
using Kingmaker.UnitLogic.Buffs.Blueprints;
using Kingmaker.UnitLogic.Commands.Base;
using Kingmaker.UnitLogic.FactLogic;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Kingmaker.UnitLogic.Abilities.Components;
using Kingmaker.Blueprints.Classes.Spells;
using Kingmaker.UnitLogic;
using Kingmaker.Blueprints;
using Kingmaker.ElementsSystem;
using Kingmaker.Designers.Mechanics.Facts;
using Kingmaker.Blueprints.Classes.Prerequisites;
using Kingmaker.UnitLogic.Mechanics.Actions;
using Kingmaker.UnitLogic.Mechanics;
using Kingmaker.Enums.Damage;
using Kingmaker.Enums;
using Kingmaker.UnitLogic.Mechanics.Components;
using Kingmaker.EntitySystem.Stats;
using Kingmaker.Utility;
using Kingmaker.RuleSystem;
using Kingmaker.UnitLogic.Mechanics.Properties;
using Kingmaker.UnitLogic.Abilities;
using Kingmaker.Designers.EventConditionActionSystem.Actions;
using Kingmaker.Designers.EventConditionActionSystem.Conditions;
using Kingmaker.UnitLogic.Mechanics.Conditions;
using Kingmaker.UnitLogic.Abilities.Components.CasterCheckers;

namespace ArcaneTide.Arcanist {
    static class ArcaneExploits {
        static internal LibraryScriptableObject library => Main.library;
        static public BlueprintFeatureSelection extraExploitFeat;

        static public BlueprintFeature potentMagic,metaMixing,fastStudy,armoredMask,energyShield;
        static public BlueprintFeature swiftConsume, consumeItem, dimensionalSlide, SR, SRGreater, SRDrain;
        static public BlueprintFeature acidJet, acidGreater;
        static public BlueprintFeatureSelection familiar, metaKnowledge, greaterMetaKnowledge, schoolUnderstanding;
        static public BlueprintFeatureSelection exploitSelection;

        static internal List<BlueprintFeature> AllExploits;
        static public bool loaded = false;
        static public void CreateExtraExploit() {
            if(exploitSelection == null) {
                throw new Exception("ArcaneExploits.CreateExtraExploit() must be called after ArcaneExploits.Load().");
            }
            var icon = library.Get<BlueprintFeature>("42f96fc8d6c80784194262e51b0a1d25").Icon; // Extra arcane pool feat
            extraExploitFeat = Helpers.CreateFeatureSelection("ArcanistClassExploitExtraExploitFeat", "", "",
                "af76e22d46b9ef8262982a920adb65ae",//MD5-32[ArcanistClass.Exploit.ExtraExploit.Feat]
                icon,
                FeatureGroup.Feat,
                Helpers.PrerequisiteClassLevel(ArcanistClass.arcanist, 1)
                );
            extraExploitFeat.SetName(Helpers.CreateString("ArcanistClass.Exploit.ExtraExploit.Name"));
            extraExploitFeat.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.ExtraExploit.Desc"));
            extraExploitFeat.SetFeatures(AllExploits);
        }
        static public void Load() {
            

            potentMagic = PotentMagic.Create();
            metaMixing = Metamixing.Create();
            fastStudy = FastStudy.Create();
            familiar = Familiar.Create();
            armoredMask = ArmoredMask.Create();
            energyShield = EnergyShield.Create();
            metaKnowledge = MetamagicKnownledge.Create();
            greaterMetaKnowledge = GreaterMetamagicKnowledge.Create();

            consumeItem = ConsumeItem.Create();
            swiftConsume = SwiftConsume.Create();
            dimensionalSlide = DimensionSlide.Create();

            SpellResistance.Create();
            SR = SpellResistance.exploit;
            SRGreater = SpellResistance.exploitHigher;
            SRDrain = SpellResistanceDrain.Create();

            AcidJet.Create();
            
            AllExploits = new List<BlueprintFeature>();
            AllExploits = (new BlueprintFeature[] { potentMagic, metaMixing,fastStudy,familiar,armoredMask,
                energyShield, metaKnowledge, greaterMetaKnowledge, consumeItem, swiftConsume, dimensionalSlide,
                SR, SRGreater, SRDrain}).ToList<BlueprintFeature>();
            AllExploits.AddRange(new BlueprintFeature[] { acidJet, acidGreater });

            exploitSelection = Helpers.CreateFeatureSelection("ArcanistClassExploitFeatureSelection", "", "",
                "b9e8c9196f14ffb7d1d5b9b17bfa8bbe",
                IconSet.wizard_feat_selection,
                FeatureGroup.None);
            exploitSelection.SetName(Helpers.CreateString("ArcanistClass.Exploit.FeatureSelection.Name"));
            exploitSelection.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.FeatureSelection.Desc"));
            exploitSelection.SetFeatures(AllExploits);

            CreateExtraExploit();
            loaded = true;
        }
    }
    static class PotentMagic{
        static public BlueprintFeature exploit;
        static public BlueprintFeature Create() {
            BlueprintFeature feat = Helpers.CreateFeature("ArcanistClassExploitPM", "", "",
                "66cbd336c0cd2adbb8404567867d545f",//MD5-32[ArcanistClass.Exploit.PotentMagic]
                IconSet.spell_strike_icon,
                FeatureGroup.None);
            feat.SetName(Helpers.CreateString("ArcanistClass.Exploit.PotentMagic.Name"));
            feat.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.PotentMagic.Desc"));
            exploit = feat;
            return feat;
        }

    }

    static class Metamixing {
        static public BlueprintFeature exploit;
        static public BlueprintBuff buff;
        static internal BlueprintActivatableAbility abl;
        static public BlueprintFeature Create() {
            LocalizedString name = Helpers.CreateString("ArcanistClass.Exploit.Metamixing.Name");
            LocalizedString desc = Helpers.CreateString("ArcanistClass.Exploit.Metamixing.Desc");
            buff = Helpers.CreateBuff("ArcanistClassExploitMetamixingOnBuff", "", "",
                "394cd08033b73c5159a745077c28f7e6", //MD5-32[ArcanistClass.Exploit.Metamixing.OnBuff]
                IconSet.spell_strike_icon, null);
            buff.SetName(name);
            buff.SetDescription(desc);

            abl = Helpers.CreateActivatableAbility("ArcanistClassExploitMetamixingActiAbl", "", "",
                "6f45e966f1b25e3fdf2d3005bdce1288",//MD5-32[ArcanistClass.Exploit.Metamixing.ActiAbl]
                IconSet.spell_strike_icon,
                buff,
                AbilityActivationType.Immediately,
                UnitCommand.CommandType.Free,
                null);
            abl.SetName(name);
            abl.SetDescription(desc);

            BlueprintFeature feat = Helpers.CreateFeature("ArcanistClassExploitPM", "", "",
                "e1a1e094774fa416fbc25ee3a8a87144",//MD5-32[ArcanistClass.Exploit.Metamixing]
                IconSet.spell_strike_icon,
                FeatureGroup.None,
                Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { abl }));
            feat.SetName(name);
            feat.SetDescription(desc);
            exploit = feat;
            return feat;
        }
    }

    static class FastStudy {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintAbility abl;
        static public BlueprintFeature exploit;
        static internal BlueprintBuff flagBuff;
        static internal Dictionary<SpellSchool, BlueprintAbility> schoolMasterAbls = new Dictionary<SpellSchool, BlueprintAbility>();
        static public BlueprintFeature Create() {
            LocalizedString loc_name = Helpers.CreateString("ArcanistClass.Exploit.FastStudy.Name");
            LocalizedString loc_desc = Helpers.CreateString("ArcanistClass.Exploit.FastStudy.Desc");
            flagBuff = Helpers.CreateBuff("ArcanistClassExploitFastStudyFlagBuff", "", "",
                OtherUtils.GetMd5("ArcanistClassExploitFastStudyFlagBuff"), null, null);
            flagBuff.SetBuffFlags(flagBuff.GetBuffFlags() | BuffFlags.HiddenInUi);

            FastStudyComponent comp = Helpers.Create<FastStudyComponent>();
            comp.flagBuff = flagBuff;
            AbilityResourceLogic comp_res = Helpers.Create<AbilityResourceLogic>();
            comp_res.RequiredResource = ArcaneReservoir.resource;
            comp_res.Amount = 1;
            comp_res.CostIsCustom = false;
            comp_res.IsSpendResource = true;
            AbilityRequirementBuff comp_req = Helpers.Create<AbilityRequirementBuff>();
            comp_req.buff = flagBuff;
            comp_req.Not = true;

            abl = Helpers.CreateAbility("ArcanistClassExploitFastStudyAbl", "", "",
                "da065b40cce4563648f5564c9c55aec5",//MD5-32[ArcanistClass.Exploit.FastStudy.Abl]
                IconSet.itembond_icon,
                AbilityType.Supernatural,
                UnitCommand.CommandType.Standard,
                AbilityRange.Personal,
                "", "",
                comp, comp_res);
            abl.SetName(loc_name);
            abl.SetDescription(loc_desc);
            abl.LocalizedDuration = PresetLocStrings.loc_instant;
            abl.LocalizedSavingThrow = PresetLocStrings.save_will_noharm;
            var fullRoundSetter = Helpers.CreateFieldSetter(typeof(BlueprintAbility), "m_IsFullRoundAction");
            fullRoundSetter(abl, true);
            exploit = Helpers.CreateFeature("ArcanistClassExploitFastStudyFeat", "", "",
                "ed15c20bdbbd5bc16a635e5339fe0c6a",//MD5-32[ArcanistClass.Exploit.FastStudy.Feat]
                IconSet.itembond_icon,
                FeatureGroup.None,
                Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { abl }));
            exploit.SetName(loc_name);
            exploit.SetDescription(loc_desc);

            CreateSchoolMasterAbls();
            return exploit;
        }
        static public void CreateSchoolMasterAbls() {
            foreach(SpellSchool sc in Enum.GetValues(typeof(SpellSchool))) {
                if (sc == SpellSchool.None) continue;
                string name = $"ArcanistClassExploitFastStudy{OtherUtils.GetSchoolStr(sc)}MasterAbl";
                BlueprintAbility abl = Helpers.CreateAbility(name, "", "",
                    OtherUtils.GetMd5(name),
                    IconSet.school_icons[sc],
                    AbilityType.Special,
                    UnitCommand.CommandType.Free,
                    AbilityRange.Personal,
                    "", "");
                abl.SetName(Helpers.CreateString($"ArcanistClass.Exploit.FastStudy.{OtherUtils.GetSchoolStr(sc)}MasterAbl.Name"));
                //abl.SetDescription(Helpers.CreateString($"ArcanistClass.Exploit.FastStudy.{OtherUtils.GetSchoolStr(sc)}MasterAbl.Desc"));
                abl.LocalizedDuration = PresetLocStrings.loc_instant;
                abl.LocalizedSavingThrow = PresetLocStrings.save_none;

                schoolMasterAbls[sc] = abl;
            }
            
        }
        static public void AddMasterAbls(UnitDescriptor unit) {
            foreach(var kv in schoolMasterAbls) {
                if(kv.Value.ComponentsArray.Length > 0)unit.AddFact(kv.Value);
            }
        }
        static public void RemoveMasterAbls(UnitDescriptor unit) {
            foreach(var kv in schoolMasterAbls) {
                if (unit.HasFact(kv.Value)) {
                    unit.RemoveFact(kv.Value);
                }
            }
        }

        static public void RefreshSubAbls(Spellbook spellbook, int spellLevel) {
            Dictionary<SpellSchool, List<BlueprintAbility>> allVariants = new Dictionary<SpellSchool, List<BlueprintAbility>>();
            List<BlueprintAbility> spellsAdded = new List<BlueprintAbility>();
            foreach (var kv in schoolMasterAbls) {
                var abl = kv.Value;
                abl.SetComponents(new BlueprintComponent[] { });
                allVariants[kv.Key] = new List<BlueprintAbility>();
            }
            
            foreach (var spell in spellbook.GetKnownSpells(spellLevel)) {
                SpellSchool sc = spell.Blueprint.School;
                if (sc == SpellSchool.None) continue;

                FastStudyMemorizeAction actn = Helpers.Create<FastStudyMemorizeAction>();
                actn.spell = spell;
                actn.spellbook = spellbook;
                AbilityEffectRunAction comp = Helpers.Create<AbilityEffectRunAction>();
                comp.Actions = new ActionList {
                    Actions = new GameAction[] { actn }
                };
              
                string abl_i_name = $"ArcanistClassExploitFastStudy_Spell{spell.Blueprint.AssetGuid}_{(spell.MetamagicData==null?0:spell.MetamagicData.MetamagicMask)}";
                BlueprintAbility abl_i;
                if (library.BlueprintsByAssetId.ContainsKey(OtherUtils.GetMd5(abl_i_name))) {
                    abl_i = library.Get<BlueprintAbility>(OtherUtils.GetMd5(abl_i_name));
                }
                else {
                    abl_i = Helpers.CreateAbility(abl_i_name, "", "",
                        OtherUtils.GetMd5(abl_i_name), spell.Blueprint.Icon,
                        AbilityType.Extraordinary,
                        UnitCommand.CommandType.Free,
                        AbilityRange.Personal,
                        "", "", comp);
                }
                abl_i.SetName(spell.Blueprint.Name);
                abl_i.SetDescription(spell.Blueprint.Description);
                abl_i.LocalizedDuration = spell.Blueprint.LocalizedDuration;
                abl_i.LocalizedSavingThrow = spell.Blueprint.LocalizedSavingThrow;
                allVariants[sc].Add(abl_i);
            }

            foreach(var kv in schoolMasterAbls) {
                var abl = kv.Value;
                SpellSchool sc = kv.Key;
                if (allVariants[sc].Count > 0) {
                    abl.AddComponent(abl.CreateAbilityVariants(allVariants[sc]));
                }
            }
        }
    }
    /*
    static class SchoolUnderstanding {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintAbility abl;
        static public BlueprintFeatureSelection exploit;
        static public BlueprintBuff activated_buff;
        static internal BlueprintCharacterClass arcanist, wizard;

        static public List<BlueprintFeature> school1_feat_list = new List<BlueprintFeature>();
        static public List<BlueprintAbility> school1_abl_list = new List<BlueprintAbility>();
        static public Dictionary<BlueprintFeature, SpellSchool> school1_feat_dict = new Dictionary<BlueprintFeature, SpellSchool>();
        static public Dictionary<BlueprintFeature, SpellSchool> school1_feat_neu_dict = new Dictionary<BlueprintFeature, SpellSchool>();
        static public Dictionary<BlueprintAbility, SpellSchool> school1_abl_dict = new Dictionary<BlueprintAbility, SpellSchool>();
        //static public List<BlueprintAbility> Temporarily_Added_Abls = new List<BlueprintAbility>();

        static internal void Prepare() {
            arcanist = ArcanistClass.arcanist;
            wizard = library.Get<BlueprintCharacterClass>("ba34257984f4c41408ce1dc2004e342e");

            school1_abl_dict[library.Get<BlueprintAbility>("3d55cc710cc497843bb51788057cd93f")] = SpellSchool.Evocation;
            school1_abl_dict[library.Get<BlueprintAbility>("2433d465095a9984398a0482b1af0877")] = SpellSchool.Abjuration;
            school1_abl_dict[library.Get<BlueprintAbility>("810992c76efdde84db707a0444cf9a1c")] = SpellSchool.Transmutation;
            school1_abl_dict[library.Get<BlueprintAbility>("7b3cb9ad9ef68cd43837c6db054f7d9f")] = SpellSchool.Enchantment;
            school1_abl_dict[library.Get<BlueprintAbility>("0997652c1d8eb164caae8a462401a25d")] = SpellSchool.Divination;
            school1_abl_dict[library.Get<BlueprintAbility>("697291ff99d3fbb448be5b60b5f2a30c")] = SpellSchool.Conjuration;
            school1_abl_dict[library.Get<BlueprintAbility>("9b4d07751dd104243a94b495c571c9dd")] = SpellSchool.Illusion;
            school1_abl_dict[library.Get<BlueprintAbility>("39af648796b7b9b4ab6321898ebb5fff")] = SpellSchool.Necromancy;

            school1_feat_dict[library.Get<BlueprintFeature>("c46512b796216b64899f26301241e4e6")] = SpellSchool.Evocation;
            school1_feat_dict[library.Get<BlueprintFeature>("30f20e6f850519b48aa59e8c0ff66ae9")] = SpellSchool.Abjuration;
            school1_feat_dict[library.Get<BlueprintFeature>("c459c8200e666ef4c990873d3e501b91")] = SpellSchool.Transmutation;
            school1_feat_dict[library.Get<BlueprintFeature>("252363458703f144788af49ef04d0803")] = SpellSchool.Enchantment;
            school1_feat_dict[library.Get<BlueprintFeature>("54d21b3221ea82a4d90d5a91b7872f3d")] = SpellSchool.Divination;
            school1_feat_dict[library.Get<BlueprintFeature>("cee0f7edbd874a042952ee150f878b84")] = SpellSchool.Conjuration;
            school1_feat_dict[library.Get<BlueprintFeature>("9be5e050244352d43a1cb50aad8d548f")] = SpellSchool.Illusion;
            school1_feat_dict[library.Get<BlueprintFeature>("927707dce06627d4f880c90b5575125f")] = SpellSchool.Necromancy;

            foreach(var kv in school1_feat_dict) {
                //Fill school1_feat_list
                school1_feat_list.Add(kv.Key);
                //Fill school1_feat_neu_dict
                var _ft = library.CopyAndAdd<BlueprintFeature>(
                    kv.Key,
                    $"ArcanistClassExploitSU{kv.Value.ToString()}NewFeat",
                    OtherUtils.GetMd5($"ArcanistClassExploitSU{kv.Value.ToString()}NewFeat")
                );
                var comp_spell = _ft.GetComponent<AddSpecialSpellList>();
                if (comp_spell != null) _ft.RemoveComponent(comp_spell);
                school1_feat_neu_dict[_ft] = kv.Value;
            }

            foreach(var kv in school1_abl_dict) {
                school1_abl_list.Add(kv.Key);
            }

        }
        static public BlueprintFeatureSelection Create() {
            Prepare();
          
           

            activated_buff = Helpers.CreateBuff("ArcanistClassExploitSUActivatedBuff", "", "",
                "09abe751c9af3035c58a7a65150486bc",//MD5-32[ArcanistClass.Exploit.SchoolUnderstanding.ActivateBuff]
                null, null,
                Helpers.Create<AddClassLevelToRankBonus>(a => {
                    a.Spells = school1_abl_list.ToArray();
                    a.ClassesAdd = new BlueprintCharacterClass[] { arcanist };
                    a.ClassesRemove = new BlueprintCharacterClass[] {  };
                }),
                Helpers.Create<AddOtherLv1Abilities>());
            activated_buff.SetName(Helpers.CreateString("ArcanistClass.Exploit.SchoolUnderstanding.ActivateBuff.Name"));
            activated_buff.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.SchoolUnderstanding.ActivateBuff.Desc"));

            var activated_ability = Helpers.CreateAbility("ArcanistClassExploitSUActivatedAbl", "", "",
                "4cfadeecd718a6eec4c231082c87e12b",//MD5-32[ArcanistClass.Exploit.SchoolUnderstanding.ActivateAbl]
                null, AbilityType.Supernatural,
                UnitCommand.CommandType.Swift,
                AbilityRange.Personal,
                "", "",
                Helpers.Create<AbilityEffectRunAction>(a => {
                    a.Actions = new ActionList {
                        Actions = new GameAction[] {
                            Helpers.Create<ContextActionApplyBuff>(b => {
                                b.Buff = activated_buff;
                                b.DurationValue = new ContextDurationValue {
                                    Rate = DurationRate.Rounds,
                                    DiceType = DiceType.Zero,
                                    DiceCountValue  = new ContextValue(),
                                    BonusValue = new ContextValue {
                                        ValueType = ContextValueType.Rank,
                                        ValueRank = AbilityRankType.Default
                                    }

                                };
                            })
                        }
                    };
                }),
                Helpers.CreateContextRankConfig(
                    ContextRankBaseValueType.StatBonus,ContextRankProgression.AsIs,
                    AbilityRankType.Default,1,100,
                    0,0,false,StatType.Charisma));
            activated_ability.SetName(activated_buff.GetName());
            activated_ability.SetDescription(activated_buff.GetDescription());
            activated_ability.LocalizedDuration = Helpers.CreateString("ArcaneTide.RoundPerChaModifier");
            activated_ability.LocalizedSavingThrow = PresetLocStrings.save_none;

            List<BlueprintFeature> features = new List<BlueprintFeature>();
            foreach(var kv in school1_abl_dict) {
                var abl_i = kv.Key;
                var sc = kv.Value;
                var feat_i = Helpers.CreateFeature($"ArcanistClassExploitSU{sc.ToString()}SubFeat", "", "",
                    OtherUtils.GetMd5($"ArcanistClassExploitSU{sc.ToString()}SubFeat"),
                    abl_i.Icon,
                    FeatureGroup.None,
                    Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { abl_i, activated_ability }));
                feat_i.SetName(abl_i.GetName());
                feat_i.SetDescription(abl_i.GetDescription());
                features.Add(feat_i);
            }
            exploit = Helpers.CreateFeatureSelection("ArcanistClassExploitSchoolUnderstandingFeatSelect", "", "",
                "d583ca520083ccddca8d3b5b08978f79",//MD5-32[ArcanistClass.Exploit.SchoolUnderstanding.FeatSelect]
                IconSet.elvenmagic,
                FeatureGroup.None);
            exploit.SetName(Helpers.CreateString("ArcanistClass.Exploit.SchoolUnderstanding.FeatSelect.Name"));
            exploit.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.SchoolUnderstanding.FeatSelect.Desc"));
            exploit.SetFeatures(features);
            return exploit;
        }
    }
*/
    static class Familiar {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintFeatureSelection arcaneBondSelection = library.Get<BlueprintFeatureSelection>("03a1781486ba98043afddaabf6b7d8ff");
        static public BlueprintFeatureSelection exploit;
        static public BlueprintFeatureSelection Create() {
            if (library.BlueprintsByAssetId.ContainsKey("3bd212428da37fa1f50a9bece6da688f")) {
                return library.Get<BlueprintFeatureSelection>("3bd212428da37fa1f50a9bece6da688f");
            }
            BlueprintFeature itemBondFeat = library.Get<BlueprintFeature>("2fb5e65bd57caa943b45ee32d825e9b9");
            exploit = Helpers.CreateFeatureSelection("ArcanistClassExploitFamiliarFeatSelection", "", "",
                "3bd212428da37fa1f50a9bece6da688f",
                IconSet.familiar_pet,
                FeatureGroup.None,
                Helpers.Create<PrerequisiteNoFeature>(a => a.Feature = arcaneBondSelection));
            exploit.AddComponent(Helpers.Create<PrerequisiteNoFeature>(a => a.Feature = exploit));
            exploit.SetName(Helpers.CreateString("ArcanistClass.Exploit.Familiar.FeatSelection.Name"));
            exploit.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.Familiar.FeatSelection.Desc"));
            var choices = new List<BlueprintFeature>();
            foreach(var subfeat in arcaneBondSelection.AllFeatures) {
                if(subfeat != itemBondFeat) {
                    choices.Add(subfeat);
                }
            }
            exploit.SetFeatures(choices);
            

            //exploit.AddComponent(Helpers.Create<PrerequisiteNoFeature>(a => a.Feature = arcaneBondSelection));
            return exploit;
        }
    }
    
    static class ArmoredMask {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintCharacterClass arcanist => ArcanistClass.arcanist;
        static public BlueprintFeature exploit;
        static public ContextActionCastSpell CreateAction(BlueprintAbility spell) {
            var actn = Helpers.Create<ContextActionCastSpell>();
            actn.Spell = spell;
            return actn;
        }
        static public BlueprintFeature Create() {
            if (library.BlueprintsByAssetId.ContainsKey("e29cbe5f70f646956aaf3e3456fd0525")) {
                return library.Get<BlueprintFeature>("e29cbe5f70f646956aaf3e3456fd0525");
            }
            BlueprintAbility MageArmor = library.Get<BlueprintAbility>("9e1ad5d6f87d19e4d8883d63a6e35568");
            BlueprintAbility ShieldOfFaith = library.Get<BlueprintAbility>("183d5bb91dea3a1489a6db6c9cb64445");

            BlueprintAbility MageArmorNeu = library.CopyAndAdd<BlueprintAbility>(
                MageArmor,
                "ArcanistClassExploitArmoredMaskMageArmorNeu",
                OtherUtils.GetMd5("ArcanistClassExploitArmoredMaskMageArmorNeu"));

            var ablShieldFaith = Helpers.CreateAbility("ArcanistClassExploitArmoredMaskSOFAbl", "", "",
                "57481ddad8630cc6bec978034c758b3c",//MD5-32[ArcanistClass.Exploit.ArmoredMask.SOFAbl]
                ShieldOfFaith.Icon,
                AbilityType.Supernatural,
                UnitCommand.CommandType.Free,
                AbilityRange.Personal,
                "", "",
                Helpers.Create<ReplaceCasterLevelOfAbility>(a => {
                    a.Class = arcanist;
                    a.Spell = ShieldOfFaith;
                }),
                Helpers.Create<AbilityEffectRunAction>(a => {
                    a.Actions = new ActionList {
                        Actions = new GameAction[] { CreateAction(ShieldOfFaith) }
                    };
                }),
                Helpers.Create<AbilityResourceLogic>(a => {
                    a.RequiredResource = ArcaneReservoir.resource;
                    a.Amount = 1;
                    a.CostIsCustom = false;
                    a.IsSpendResource = true;
                }));
            ablShieldFaith.SetName(ShieldOfFaith.GetName());
            ablShieldFaith.SetDescription(ShieldOfFaith.GetDescription());
            ablShieldFaith.LocalizedDuration = ShieldOfFaith.LocalizedDuration;
            ablShieldFaith.LocalizedSavingThrow = ShieldOfFaith.LocalizedSavingThrow;

            BuffAddFacts buffcomp = Helpers.Create<BuffAddFacts>();
            buffcomp.Facts = new BlueprintUnitFact[] { ablShieldFaith };
            BlueprintBuff buff = Helpers.CreateBuff("ArcanistClassExploitShieldMaskHiddenBuff", "fart", "fuck",
                OtherUtils.GetMd5("ArcanistClassExploitShieldMaskHiddenBuff"),
                IconSet.vanish_icon, null, buffcomp);
            buff.SetBuffFlags(buff.GetBuffFlags() | BuffFlags.HiddenInUi);
            buff.SetBuffFlags(buff.GetBuffFlags() & (~BuffFlags.IsFromSpell));

            MageArmorNeu.Range = AbilityRange.Personal;
            var addBuffActn = Helpers.Create<ContextActionApplyBuff>(a => {
                a.Buff = buff;
                a.UseDurationSeconds = false;
                a.Permanent = false;
                a.IsNotDispelable = true;
                a.IsFromSpell = false;
                a.DurationValue = new ContextDurationValue {
                    Rate = DurationRate.Hours,
                    DiceType = Kingmaker.RuleSystem.DiceType.Zero,
                    DiceCountValue = new ContextValue {
                        ValueType = ContextValueType.Simple,
                        Value = 0
                    },
                    BonusValue = new ContextValue {
                        ValueType = ContextValueType.Rank,
                        ValueRank = Kingmaker.Enums.AbilityRankType.Default
                    }
                };
            });
            /*MageArmorNeu.AddComponent(Helpers.Create<AbilityEffectRunAction>(a => {
                a.Actions = new ActionList {
                    Actions = new GameAction[] { addBuffActn }
                };
            }));*/
            

            var ablMageArmor = Helpers.CreateAbility("ArcanistClassExploitArmoredMaskMAAbl", "", "",
                "e9c4364ae06f7323a7d53264a2202907",//MD5-32[ArcanistClass.Exploit.ArmoredMask.MAAbl]
                MageArmor.Icon,
                AbilityType.Supernatural,
                UnitCommand.CommandType.Standard,
                AbilityRange.Personal,
                "", "",
                Helpers.Create<ReplaceCasterLevelOfAbility>(a => {
                    a.Class = arcanist;
                    a.Spell = MageArmorNeu;
                }),
                Helpers.Create<AbilityEffectRunAction>(a => {
                    a.Actions = new ActionList {
                        Actions = new GameAction[] { CreateAction(MageArmorNeu), addBuffActn }
                    };
                }),
                Helpers.Create<AbilityResourceLogic>(a => {
                    a.RequiredResource = ArcaneReservoir.resource;
                    a.Amount = 1;
                    a.CostIsCustom = false;
                    a.IsSpendResource = true;
                }));
            ablMageArmor.SetName(Helpers.CreateString("ArcanistClass.Exploit.ArmoredMask.MAAbl.Name"));
            ablMageArmor.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.ArmoredMask.MAAbl.Desc"));
            ablMageArmor.LocalizedDuration = Helpers.CreateString("ArcaneTide.HoursPerLevel");
            ablMageArmor.LocalizedSavingThrow = MageArmor.LocalizedSavingThrow;

            exploit = Helpers.CreateFeature("ArcanistClassExploitArmoredMaskFeat", "", "",
                "e29cbe5f70f646956aaf3e3456fd0525",//MD5-32[ArcanistClass.Exploit.ArmoredMask.Feat]
                MageArmor.Icon,
                FeatureGroup.None,
                Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { ablMageArmor }),
                Helpers.Create<ReplaceCasterLevelOfAbility>(a => {
                    a.Class = arcanist;
                    a.Spell = ablMageArmor;
                }));
            exploit.SetName(ablMageArmor.GetName());
            exploit.SetDescription(ablMageArmor.GetDescription());
            return exploit;
        }
    }
    static class MetamagicKnownledge {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintCharacterClass arcanist => ArcanistClass.arcanist;
        static public BlueprintFeatureSelection exploit;
        static public BlueprintFeatureSelection Create() {
            if (library.BlueprintsByAssetId.ContainsKey("0d8b199008f557bf50cdd7b9f4b0920c")) {
                return library.Get<BlueprintFeatureSelection>("0d8b199008f557bf50cdd7b9f4b0920c");
            }
            exploit = Helpers.CreateFeatureSelection("ArcanistClassExploitMetamagicKnowledge", "", "",
                "0d8b199008f557bf50cdd7b9f4b0920c",//MD5-32[ArcanistClass.Exploit.MetamagicKnowledge]
                IconSet.metamagic,
                FeatureGroup.None);
            List<BlueprintFeature> metafeatList = new List<BlueprintFeature>();
            foreach(var kv in MetaFeats.dict) {
                metafeatList.Add(library.Get<BlueprintFeature>(kv.Value));
            }
            exploit.SetName(Helpers.CreateString("ArcanistClass.Exploit.MetamagicKnowledge.Name"));
            exploit.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.MetamagicKnowledge.Desc"));
            exploit.SetFeatures(metafeatList);
            return exploit;
        }
    }
    static class EnergyShield {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintCharacterClass arcanist => ArcanistClass.arcanist;
        static public BlueprintFeature exploit;
        static internal Dictionary<DamageEnergyType, BlueprintAbility> resist_energy_spells = new Dictionary<DamageEnergyType, BlueprintAbility>();
        static public BlueprintFeature Create() {
            if (library.BlueprintsByAssetId.ContainsKey("03708743f0b26e55c80b9c7386bb1a57")) {
                return library.Get<BlueprintFeature>("03708743f0b26e55c80b9c7386bb1a57");
            }
            resist_energy_spells[DamageEnergyType.Fire] = library.Get<BlueprintAbility>("ddfb4ac970225f34dbff98a10a4a8844");
            resist_energy_spells[DamageEnergyType.Cold] = library.Get<BlueprintAbility>("5368cecec375e1845ae07f48cdc09dd1");
            resist_energy_spells[DamageEnergyType.Acid] = library.Get<BlueprintAbility>("fedc77de9b7aad54ebcc43b4daf8decd");
            resist_energy_spells[DamageEnergyType.Electricity] = library.Get<BlueprintAbility>("90987584f54ab7a459c56c2d2f22cee2");
            resist_energy_spells[DamageEnergyType.Sonic] = library.Get<BlueprintAbility>("8d3b10f92387c84429ced317b06ad001");
            List<BlueprintAbility> variants = new List<BlueprintAbility>();
            LocalizedString name = Helpers.CreateString("ArcanistClass.Exploit.EnergyShield.Name");
            LocalizedString desc = Helpers.CreateString("ArcanistClass.Exploit.EnergyShield.Desc"); 
            foreach(DamageEnergyType energy in typeof(DamageEnergyType).GetEnumValues()) {
                if ((int)(energy) >= 5) continue;//energy must be five kinds of elements (0-4)
                AddDamageResistanceEnergy comp1 = Helpers.Create<AddDamageResistanceEnergy>();
                comp1.UseValueMultiplier = true;
                comp1.ValueMultiplier = 5;
                comp1.Type = energy;
                comp1.Value = new ContextValue {
                    ValueRank = AbilityRankType.DamageBonus,
                    ValueType = ContextValueType.Rank
                };

                ContextRankConfig comp2 = Helpers.CreateContextRankConfig(
                    ContextRankBaseValueType.ClassLevel,
                    ContextRankProgression.StartPlusDivStep,
                    AbilityRankType.DamageBonus,
                    2, 6, -5, 5, false, StatType.Unknown, null,
                    new BlueprintCharacterClass[] { arcanist }, null,
                    null, null, null);

                string buffname_i = $"ArcanistClassExploitEnergyShield{energy.ToString()}Buff";
                BlueprintBuff buff_i = Helpers.CreateBuff(buffname_i, "", "",
                    OtherUtils.GetMd5(buffname_i),
                    resist_energy_spells[energy].Icon, null,comp1,comp2);
                buff_i.SetName(Helpers.CreateString($"ArcanistClass.Exploit.EnergyShield.{energy.ToString()}Buff.Name"));
                buff_i.SetDescription(Helpers.CreateString($"ArcanistClass.Exploit.EnergyShield.{energy.ToString()}Buff.Desc"));

                var actn_i = Helpers.Create<ContextActionApplyBuff>();
                actn_i.Buff = buff_i;
                actn_i.UseDurationSeconds = false;
                actn_i.Permanent = false;
                actn_i.IsFromSpell = false;
                actn_i.IsNotDispelable = true;
                actn_i.DurationValue = new ContextDurationValue {
                    Rate = DurationRate.Minutes,
                    DiceCountValue = new ContextValue(),
                    BonusValue = new ContextValue {
                        ValueType = ContextValueType.Rank,
                        ValueRank = AbilityRankType.Default
                    },
                    DiceType = Kingmaker.RuleSystem.DiceType.Zero
                };

                var rankconfig_abl = Helpers.CreateContextRankConfig(ContextRankBaseValueType.ClassLevel,
                    ContextRankProgression.AsIs, AbilityRankType.Default, 1, 20, 0,0,
                    false,StatType.Unknown,null,new BlueprintCharacterClass[] { arcanist });

                string abli_name = $"ArcanistClassExploitEnergyShield{energy.ToString()}SubAbl";
                BlueprintAbility abl_i = Helpers.CreateAbility(abli_name, "", "",
                    OtherUtils.GetMd5(abli_name),
                    resist_energy_spells[energy].Icon,
                    AbilityType.Supernatural,
                    UnitCommand.CommandType.Standard,
                    AbilityRange.Personal,
                    "", "",
                    Helpers.Create<AbilityResourceLogic>(a => {
                        a.RequiredResource = ArcaneReservoir.resource;
                        a.Amount = 1;
                        a.CostIsCustom = false;
                        a.IsSpendResource = true;
                    }),
                    Helpers.Create<AbilityEffectRunAction>(a => a.Actions = new ActionList {
                        Actions = new GameAction[] {actn_i}
                    }),
                    rankconfig_abl);//here we need to add the buff & the resource comp
                abl_i.SetName(Helpers.CreateString($"ArcanistClass.Exploit.EnergyShield.{energy.ToString()}Buff.Name"));
                abl_i.SetDescription(Helpers.CreateString($"ArcanistClass.Exploit.EnergyShield.{energy.ToString()}Buff.Desc"));
                abl_i.LocalizedDuration = PresetLocStrings.loc_minute;
                abl_i.LocalizedSavingThrow = PresetLocStrings.save_will_noharm;
                variants.Add(abl_i);
            }
            BlueprintAbility abl = Helpers.CreateAbility("ArcanistClassExploitEnergyShieldAbl", "", "",
                "f606d49df053805db41da7c7f50e697a",//MD5-32[ArcanistClass.Exploit.EnergyShield.Abl]
                IconSet.resistenergy,
                AbilityType.Supernatural,
                UnitCommand.CommandType.Standard,
                AbilityRange.Personal,
                "", "",
                Helpers.Create<AbilityResourceLogic>(a => {
                    a.RequiredResource = ArcaneReservoir.resource;
                    a.Amount = 1;
                    a.CostIsCustom = false;
                    a.IsSpendResource = true;
                }));
            abl.SetName(name);
            abl.SetDescription(desc);
            abl.LocalizedDuration = PresetLocStrings.loc_minute;
            abl.LocalizedSavingThrow = PresetLocStrings.save_will_noharm;
            abl.AddComponent(abl.CreateAbilityVariants(variants));

            exploit = Helpers.CreateFeature("ArcanistClassExploitEnergyShieldFeat", "", "",
                "03708743f0b26e55c80b9c7386bb1a57",//MD5-32[ArcanistClass.Exploit.EnergyShield.Feat]
                IconSet.resistenergy,
                FeatureGroup.None,
                Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { abl }));
            exploit.SetName(name);
            exploit.SetDescription(desc);
            return exploit;
        }
    }
    static class SwiftConsume {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintCharacterClass arcanist => ArcanistClass.arcanist;
        static public BlueprintFeature exploit;
        static public BlueprintFeature Create() {
            if (library.BlueprintsByAssetId.ContainsKey("22067bbcc75e2c1e8ab7ea1cc965bd75")) {
                return library.Get<BlueprintFeature>("22067bbcc75e2c1e8ab7ea1cc965bd75");
            }
            exploit = Helpers.CreateFeature("ArcanistClassExploitSwiftConsume", "", "",
                "22067bbcc75e2c1e8ab7ea1cc965bd75",//MD5-32[ArcanistClass.Exploit.SwiftConsume]
                IconSet.magearmor,
                FeatureGroup.None);
            exploit.SetName(Helpers.CreateString("ArcanistClass.Exploit.SwiftConsume.Name"));
            exploit.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.SwiftConsume.Desc"));
            return exploit;
        }
    }
    static class ConsumeItem {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintCharacterClass arcanist => ArcanistClass.arcanist;
        static public BlueprintFeature exploit;
        static public BlueprintAbility abl;
        static public BlueprintFeature Create() {
            if (library.BlueprintsByAssetId.ContainsKey("42f469170d006eb9b90b09a7bed56a57")) {
                return library.Get<BlueprintFeature>("42f469170d006eb9b90b09a7bed56a57");
            }
            LocalizedString name = Helpers.CreateString("ArcanistClass.Exploit.ConsumeItem.Name");
            LocalizedString desc = Helpers.CreateString("ArcanistClass.Exploit.ConsumeItem.Desc");
            abl = Helpers.CreateAbility("ArcanistClassExploitConsumeItemAbl", "", "",
                "b831aae6daf0be030128c0ed708117e2",//MD5-32[ArcanistClass.Exploit.ConsumeItem.Abl]
                IconSet.vanish_icon,
                AbilityType.Supernatural,
                UnitCommand.CommandType.Standard,
                AbilityRange.Personal,
                "", "",
                Helpers.Create<ConsumeItemComponent>()
                );
            abl.SetName(name);
            abl.SetDescription(desc);
            abl.LocalizedDuration = PresetLocStrings.loc_instant;

            exploit = Helpers.CreateFeature("ArcanistClassExploitConsumeItemFeat", "", "",
                "42f469170d006eb9b90b09a7bed56a57",//MD5-32[ArcanistClass.Exploit.ConsumeItem.Feat]
                IconSet.vanish_icon,
                FeatureGroup.None,
                Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { abl }));
            exploit.SetName(name);
            exploit.SetDescription(desc);

            return exploit;
        }
    }
    static class DimensionSlide {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintCharacterClass arcanist => ArcanistClass.arcanist;
        static public BlueprintFeature exploit;
        static public BlueprintFeature Create() {
            if (library.BlueprintsByAssetId.ContainsKey("a67faae2441d15c8a65236b25c6cd855")) {
                return library.Get<BlueprintFeature>("a67faae2441d15c8a65236b25c6cd855");
            }
            var name = Helpers.CreateString("ArcanistClass.Exploit.DimensionSlide.Name");
            var desc = Helpers.CreateString("ArcanistClass.Exploit.DimensionSlide.Desc");
            var abl = library.CopyAndAdd<BlueprintAbility>(
                "336a841704b7e2341b51f89fc9491f54", //monk's kiAbundantStep ability
                "ArcanistClassExploitDimensionSlideAbl",
                "9cfb62296532346386a9d27591a74486"//MD5-32[ArcanistClass.Exploit.DimensionSlide.Abl]
                );

            abl.SetName(name);
            abl.SetDescription(desc);
            abl.ActionType = UnitCommand.CommandType.Swift;
            abl.AddComponent(Helpers.Create<AbilityRangeComponent>(a => {
                a.classes = new BlueprintCharacterClass[] { arcanist };
                a.multiplier = 10.0f;
            }));
            var compResOld = abl.GetComponent<AbilityResourceLogic>();
            if (compResOld != null) abl.RemoveComponent(compResOld);
            var compResNew = Helpers.Create<AbilityResourceLogic>(a => {
                a.Amount = 1;
                a.CostIsCustom = false;
                a.IsSpendResource = true;
                a.RequiredResource = ArcaneReservoir.resource;
            });
            abl.AddComponent(compResNew);

            exploit = Helpers.CreateFeature("ArcanistClassExploitDimensionSlideFeat", "", "",
                "a67faae2441d15c8a65236b25c6cd855",//MD5-32[ArcanistClass.Exploit.DimensionSlide.Feat]
                IconSet.dimension,
                FeatureGroup.None,
                Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { abl }));
            exploit.SetName(name);
            exploit.SetDescription(desc);
            return exploit;
        }
    }
    static class AcidJet {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintCharacterClass arcanist => ArcanistClass.arcanist;
        static public BlueprintFeature exploit, exploitGreater;
        static internal BlueprintAbility AcidSplash = library.Get<BlueprintAbility>("0c852a2405dd9f14a8bbcfaf245ff823");
        static public void Create() {
            if (library.BlueprintsByAssetId.ContainsKey("5fd4a527cd44fdb50a78fb160b52e153")) {
                return;
            }
            LocalizedString name = Helpers.CreateString("ArcanistClass.Exploit.AcidJet.Name");
            LocalizedString desc = Helpers.CreateString("ArcanistClass.Exploit.AcidJet.Desc");
            LocalizedString nameG = Helpers.CreateString("ArcanistClass.Exploit.LingeringAcid.Name");
            LocalizedString descG = Helpers.CreateString("ArcanistClass.Exploit.LingeringAcid.Desc");
            exploitGreater = Helpers.CreateFeature("ArcanistClassExploitLingeringAcidFeat", "", "",
                "b2b8fdf1c86a3ac9482fdb6918896852",//MD5-32[ArcanistClass.Exploit.LingeringAcid.Feat]
                AcidSplash.Icon,
                FeatureGroup.None);
            exploitGreater.SetName(nameG);
            exploitGreater.SetDescription(descG);

            var lingeringBuff = Helpers.CreateBuff("ArcanistClassExploitLingeringAcidBuff", "", "",
                "cff6beea1eedd2278a7c2ba2a8abac8b",//MD5-32[ArcanistClass.Exploit.LingeringAcid.Buff]
                AcidSplash.Icon,
                null,
                Helpers.Create<BuffAcidBurst>(a => a.CL = new ContextValue {
                    ValueType = ContextValueType.Rank,
                    ValueRank = AbilityRankType.DamageDice
                }),
                Helpers.CreateContextRankConfig(ContextRankBaseValueType.ClassLevel, ContextRankProgression.StartPlusDivStep,
                AbilityRankType.DamageDice, 1, 100, 1, 2, false, StatType.Unknown, null,
                new BlueprintCharacterClass[] { ArcanistClass.arcanist }));
            lingeringBuff.SetName(nameG);
            lingeringBuff.SetDescription(descG);

            var abl = Helpers.CreateAbility("ArcanistClassExploitAcidJetAbl", "", "",
                "d1289e45d9dba121495c7c511809f1d7",//MD5-32[ArcanistClass.Exploit.AcidJet.Abl]
                AcidSplash.Icon,
                AbilityType.Supernatural,
                UnitCommand.CommandType.Standard,
                AbilityRange.Custom,
                "", "");
            abl.CustomRange = new Feet(30);
            abl.CanTargetEnemies = true;
            abl.CanTargetFriends = false;
            abl.CanTargetPoint = false;
            abl.CanTargetSelf = true;
            abl.EffectOnAlly = AbilityEffectOnUnit.None;
            abl.EffectOnEnemy = AbilityEffectOnUnit.Harmful;
            abl.SetName(name);
            abl.SetDescription(desc);
            abl.LocalizedDuration = PresetLocStrings.loc_instant;
            abl.LocalizedDuration = PresetLocStrings.save_fort_part;

            var comp1 = AcidSplash.GetComponent<AbilityDeliverProjectile>();
            abl.AddComponent(comp1);

            var comp_actn = AcidSplash.GetComponent<AbilityEffectRunAction>();
            var comp_actn_neu = UnityEngine.Object.Instantiate<AbilityEffectRunAction>(comp_actn);
            ContextActionDealDamage actn_damage_neu = null, actn_damage = comp_actn.Actions.Actions[0] as ContextActionDealDamage;
            if (actn_damage != null) {
                actn_damage_neu = UnityEngine.Object.Instantiate<ContextActionDealDamage>(actn_damage);
                actn_damage_neu.Value = new ContextDiceValue {
                    DiceType = DiceType.D6,
                    DiceCountValue = new ContextValue {
                        ValueType = ContextValueType.Rank,
                        ValueRank = AbilityRankType.DamageDice
                    },
                    BonusValue = new ContextValue {
                        ValueType = ContextValueType.Rank,
                        ValueRank = AbilityRankType.DamageBonus
                    }
                };
            }
            ContextActionSavingThrow actn_save = Helpers.Create<ContextActionSavingThrow>();
            actn_save.Type = SavingThrowType.Fortitude;
            actn_save.Actions = new ActionList {
                Actions = new GameAction[] {
                    Helpers.Create<ContextActionConditionalSaved>(a => {
                        a.Failed = new ActionList {
                            Actions = new GameAction[] {
                                Helpers.Create<ContextActionApplyBuff>(b => {
                                    b.Buff = library.Get<BlueprintBuff>("4e42460798665fd4cb9173ffa7ada323");//Sickened buff
                                    b.UseDurationSeconds = false;
                                    b.DurationValue = new ContextDurationValue {
                                        Rate = DurationRate.Rounds,
                                        DiceType = DiceType.D4,
                                        DiceCountValue = new ContextValue {
                                            ValueType = ContextValueType.Simple,
                                            Value = 1
                                        },
                                        BonusValue = new ContextValue()
                                    };
                                })
                            }
                        };
                    })
                }
            };

            Conditional actn_lingeringAcid = Helpers.Create<Conditional>();
            actn_lingeringAcid.ConditionsChecker = new ConditionsChecker {
                Conditions = new Condition[] {
                    Helpers.Create<ContextConditionHasFact>(a => {
                        a.Fact = exploitGreater;
                        a.Not = false;
                    })
                }
            };
            actn_lingeringAcid.IfTrue = new ActionList {
                Actions = new GameAction[]{
                    Helpers.Create<ContextActionApplyBuff>(a => {
                        a.Buff = lingeringBuff;
                        a.DurationSeconds = 99999;
                        a.UseDurationSeconds = true;
                        a.Permanent = true;
                    })
                }
            };
            actn_lingeringAcid.IfFalse = new ActionList();

            comp_actn_neu.Actions = new ActionList {
                Actions = new GameAction[] { actn_damage_neu, actn_save }
            };
            abl.AddComponent(comp_actn_neu);

            abl.AddComponent(Helpers.CreateContextRankConfig(
                ContextRankBaseValueType.ClassLevel,
                ContextRankProgression.StartPlusDivStep,
                AbilityRankType.DamageDice,
                1, 20, 1, 2, false,
                StatType.Unknown,
                null, new BlueprintCharacterClass[] { arcanist }
                ));//lv1 = 1d6, lv3 = 2d6, lv5 = 3d6, etc
            abl.AddComponent(Helpers.CreateContextRankConfig(
                ContextRankBaseValueType.StatBonus,
                ContextRankProgression.AsIs,
                AbilityRankType.DamageBonus,
                null, null, 0, 0, false, StatType.Charisma
                ));//charisma modifier
            abl.AddComponent(Helpers.Create<ContextCalculateAbilityParamsBasedOnClass>(a => {
                a.StatType = StatType.Charisma;
                a.CharacterClass = arcanist;
            }));
            abl.AddComponent(Helpers.Create<AbilityResourceLogic>(a => {
                a.RequiredResource = ArcaneReservoir.resource;
                a.Amount = 1;
                a.CostIsCustom = false;
                a.IsSpendResource = true;
            }));

            var abl_greater = library.CopyAndAdd<BlueprintAbility>(
                abl,
                "ArcanistClassExploitLingeringAcidAbl",
                "534831755d2ed544c3d1e85ea299bc5b");//MD5-32[ArcanistClass.Exploit.LingeringAcid.Abl]
            var comp_actn_neu_neu = UnityEngine.Object.Instantiate(comp_actn_neu);
            comp_actn_neu_neu.Actions = new ActionList {
                Actions = new GameAction[] { actn_lingeringAcid, actn_save, actn_damage_neu }
            };
            abl_greater.RemoveComponent(comp_actn_neu);
            abl_greater.AddComponent(comp_actn_neu_neu);
            abl_greater.AddComponent(Helpers.Create<AbilityShowIfCasterHasFact>(a => a.UnitFact = exploitGreater));
            abl_greater.AddComponent(Helpers.Create<AbilityCasterHasFacts>(a => a.Facts = new BlueprintUnitFact[] { exploitGreater }));
            var res_comp = abl_greater.GetComponent<AbilityResourceLogic>();
            abl_greater.RemoveComponent(res_comp);
            abl_greater.AddComponent(Helpers.Create<AbilityResourceLogic>(a => {
                a.Amount = 2;
                a.CostIsCustom = false;
                a.IsSpendResource = true;
                a.RequiredResource = ArcaneReservoir.resource;
            }));
            abl_greater.SetName(nameG);
            abl_greater.SetDescription(descG);


            var abl_master = Helpers.CreateAbility("ArcanistClassExploitAcidMasterAbl", "", "",
                "e7a5e968d95193d07eb61b9981cd485f",//MD5-32[ArcanistClass.Exploit.Acid.MasterAbl]
                AcidSplash.Icon,
                AbilityType.Supernatural,
                UnitCommand.CommandType.Standard,
                AbilityRange.Custom,
                "", "",
                Helpers.Create<AbilityResourceLogic>(a => {
                    a.Amount = 0;
                    a.CostIsCustom = true;
                    a.IsSpendResource = true;
                    a.RequiredResource = ArcaneReservoir.resource;
                }));
            abl_master.SetName(name);
            abl_master.SetDescription(desc);
            abl_master.LocalizedDuration = PresetLocStrings.loc_instant;
            abl_master.LocalizedDuration = PresetLocStrings.save_fort_part;
            abl_master.AddComponent(abl_master.CreateAbilityVariants(new BlueprintAbility[] { abl, abl_greater }));

            exploit = Helpers.CreateFeature("ArcanistClassExploitAcidJetFeat", "", "",
                "5fd4a527cd44fdb50a78fb160b52e153",//MD5-32[ArcanistClass.Exploit.AcidJet.Feat]
                AcidSplash.Icon,
                FeatureGroup.None,
                Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { abl_master }));
            exploit.SetName(name);
            exploit.SetDescription(desc);

            exploitGreater.AddComponent(Helpers.PrerequisiteFeature(GreaterExploits.feat));
            exploitGreater.AddComponent(Helpers.PrerequisiteFeature(exploit));
        }
    }
    static class SpellResistance {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintCharacterClass arcanist => ArcanistClass.arcanist;
        static public BlueprintFeature exploit, exploitHigher;
        static public BlueprintBuff buff;
        static public void Create() {
            if (library.BlueprintsByAssetId.ContainsKey("28c5272a2c8b34a8f9f18ae580af9a23")) return;
            exploitHigher = Helpers.CreateFeature("ArcanistClassExploitGreaterSR", "", "",
                "4415d858e737aaae8c4c8e99e1c40f53",//MD5-32[ArcanistClass.Exploit.GreaterSR.Feat]
                IconSet.sr,
                FeatureGroup.None);
            exploitHigher.SetName(Helpers.CreateString("ArcanistClass.Exploit.GreaterSR.Name"));
            exploitHigher.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.GreaterSR.Desc"));
            exploitHigher.AddComponent(Helpers.PrerequisiteFeature(GreaterExploits.feat));
            string name = Helpers.CreateString("ArcanistClass.Exploit.SR.Name");
            string desc = Helpers.CreateString("ArcanistClass.Exploit.SR.Desc");
            buff = Helpers.CreateBuff("ArcanistClassExploitSRBuff", "", "",
                "53758a50618b37278e2d8e8adf9077e5", //MD5-32[ArcanistClass.Exploit.SR.Buff]
                IconSet.sr,
                null,
                Helpers.Create<SRExploitsBuff>(a => a.classes = new BlueprintCharacterClass[] { arcanist }));
            buff.SetName(name);
            buff.SetDescription(desc);

            var removeBuffAbl = Helpers.CreateAbility("ArcanistClassExploitSRRemoveSRAbl", "", "",
                "8ff2f58126b915b3531dff9342f78b14",//MD5-32[ArcanistClass.Exploit.SR.RemoveSRAbl]
                IconSet.sr,
                AbilityType.Special,
                UnitCommand.CommandType.Free,
                AbilityRange.Personal,
                "", "",
                Helpers.Create<AbilityEffectRunAction>(a => a.Actions = new ActionList {
                    Actions = new GameAction[] {
                        Helpers.Create<ContextActionRemoveBuff>(b => {
                            b.Buff = buff;
                        })
                    }
                }));
            removeBuffAbl.SetName(Helpers.CreateString("ArcanistClass.Exploit.SR.RemoveSRAbl.Name"));
            removeBuffAbl.SetDescription(Helpers.CreateString("ArcanistClass.Exploit.SR.RemoveSRAbl.Desc"));
            removeBuffAbl.LocalizedDuration = PresetLocStrings.loc_instant;
            buff.AddComponent(Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { removeBuffAbl }));

            var abl = Helpers.CreateAbility("ArcanistClassExploitSRAbl", "", "",
                "2191bf882b43edebe3753b46b34c2f2a",//MD5-32[ArcanistClass.Exploit.SR.Abl]
                IconSet.sr,
                AbilityType.Supernatural,
                UnitCommand.CommandType.Standard,
                AbilityRange.Personal,
                "", "",
                //Ranktype default = charisma modifier
                Helpers.CreateContextRankConfig(ContextRankBaseValueType.StatBonus,ContextRankProgression.AsIs,
                AbilityRankType.Default,1,null,0,0,false,StatType.Charisma),
                Helpers.Create<AbilityResourceLogic>(a => {
                    a.Amount = 1;
                    a.CostIsCustom = false;
                    a.IsSpendResource = true;
                    a.RequiredResource = ArcaneReservoir.resource;
                }),
                //apply buff
                Helpers.Create<AbilityEffectRunAction>(a => {
                    a.Actions = new ActionList {
                        Actions = new GameAction[] {
                            Helpers.Create<ContextActionApplyBuff>(b => {
                                b.Buff = buff;
                                b.UseDurationSeconds = false;
                                b.Permanent = false;
                                b.DurationValue = new ContextDurationValue {
                                    DiceType = DiceType.Zero,
                                    DiceCountValue = new ContextValue {
                                        ValueType = ContextValueType.Simple,
                                        Value = 0
                                    },
                                    BonusValue = new ContextValue {
                                        ValueType = ContextValueType.Rank,
                                        ValueRank = AbilityRankType.Default
                                    },
                                    Rate = DurationRate.Rounds
                                };
                            })
                        }
                    };
                }));
            abl.SetName(name);
            abl.SetDescription(desc);
            abl.LocalizedDuration = Helpers.CreateString("ArcaneTide.RoundPerChaModifier");

            exploit = Helpers.CreateFeature("ArcanistClassExploitSRFeat", "", "",
                "28c5272a2c8b34a8f9f18ae580af9a23",//MD5-32[ArcanistClass.Exploit.SR.Feat]
                IconSet.sr,
                FeatureGroup.None,
                Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { abl }));
            exploit.SetName(name);
            exploit.SetDescription(desc);

            exploitHigher.AddComponent(Helpers.PrerequisiteFeature(exploit));
        }

        
    }

    static class SpellResistanceDrain {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintCharacterClass arcanist => ArcanistClass.arcanist;
        static public BlueprintFeature exploit;
        static public BlueprintAbilityResource drained_arcane_points_res;
        static public BlueprintFeature Create() {
            if (library.BlueprintsByAssetId.ContainsKey("ed7338ec60fe1f1d4daa54aab7413512")) {
                return library.Get<BlueprintFeature>("ed7338ec60fe1f1d4daa54aab7413512");
            }
            if(SpellResistance.exploitHigher == null) {
                throw new Exception("Exploit: Spell Resistance (Greater) must be created before creating Exploit: Resistance Drain.");
                
            }
            var name = Helpers.CreateString("ArcanistClass.Exploit.ResistanceDrain.Name");
            var desc = Helpers.CreateString("ArcanistClass.Exploit.ResistanceDrain.Desc");
            drained_arcane_points_res = Helpers.CreateAbilityResource("ArcanistClassSRDrainPoints", "", "",
                OtherUtils.GetMd5("ArcanistClass.SR.DrainPoints"),
                null);
            drained_arcane_points_res.SetFixedResource(5);

            var abl = Helpers.CreateAbility("ArcanistClassExploitResistanceDrainAbl", "", "",
                "e592859bdad9ea9fb7cf470858729780",//MD5-32[ArcanistClass.Exploit.ResistanceDrain.Abl]
                IconSet.sr,
                AbilityType.Supernatural,
                UnitCommand.CommandType.Free,
                AbilityRange.Personal,
                "", "",
                Helpers.Create<AbilityEffectRunAction>(a => a.Actions = new ActionList {
                    Actions = new GameAction[] {
                        Helpers.Create<UseSRDrainedPointsAction>(b => {
                            b.points = drained_arcane_points_res;
                            b.reservoir = ArcaneReservoir.resource;
                            b.sr_buff = SpellResistance.buff;
                        })
                    }
                }),
                Helpers.Create<AbilityResourceLogic>(a => {
                    a.Amount = 1;
                    a.CostIsCustom = false;
                    a.IsSpendResource = true;
                    a.RequiredResource = drained_arcane_points_res;
                })
                );
            abl.SetName(name);
            abl.SetDescription(desc);
            abl.LocalizedDuration = PresetLocStrings.loc_instant;

            exploit = Helpers.CreateFeature("ArcanistClassExploitResistanceDrainFeat", "", "",
                "ed7338ec60fe1f1d4daa54aab7413512",//MD5-32[ArcanistClass.Exploit.ResistanceDrain.Feat]
                IconSet.sr,
                FeatureGroup.None,
                Helpers.Create<AddAbilityResources>(a => {
                    a.Amount = 0;
                    a.RestoreAmount = false;
                    a.RestoreOnLevelUp = false;
                    a.Resource = drained_arcane_points_res;
                }),
                Helpers.Create<SRDrainExploitComponent>(a => a.resource = drained_arcane_points_res),
                Helpers.Create<AddFacts>(a => a.Facts = new BlueprintUnitFact[] { abl }));
            exploit.SetName(name);
            exploit.SetDescription(desc);
            exploit.AddComponent(Helpers.PrerequisiteFeature(SpellResistance.exploitHigher));
            exploit.AddComponent(Helpers.PrerequisiteFeature(GreaterExploits.feat));
            return exploit;
        }
    }
    static class GreaterMetamagicKnowledge {
        static internal LibraryScriptableObject library => Main.library;
        static internal BlueprintCharacterClass arcanist => ArcanistClass.arcanist;
        static public BlueprintFeatureSelection exploit;
        static public BlueprintAbilityResource resource;
        static public List<BlueprintBuff> subBuffs = new List<BlueprintBuff>();
        static public BlueprintFeatureSelection Create() {
            if (library.BlueprintsByAssetId.ContainsKey("3449868d0b7396efdf34f1c8b4fee542")) {
                return library.Get<BlueprintFeatureSelection>("3449868d0b7396efdf34f1c8b4fee542");
            }
            resource = Helpers.CreateAbilityResource("ArcanistClassExploitGreaterMagicKnowledgeRes", "", "",
                "bd5571d347036056e47a066df420928f",//MD5-32[ArcanistClass.Exploit.GreaterMagicKnowledge.Res]
                null);
            resource.SetFixedResource(1);
            var name = Helpers.CreateString("ArcanistClass.Exploit.GreaterMetamagicKnowledge.Name");
            var desc = Helpers.CreateString("ArcanistClass.Exploit.GreaterMetamagicKnowledge.Desc");

            exploit = Helpers.CreateFeatureSelection("ArcanistClassExploitGreaterMagicKnowledgeFeat", "", "",
                "3449868d0b7396efdf34f1c8b4fee542",//MD5-32[ArcanistClass.Exploit.GreaterMagicKnowledge.Feat]
                IconSet.metamagic,
                FeatureGroup.None,
                Helpers.Create<AddAbilityResources>(a => {
                    a.Resource = resource;
                    a.RestoreOnLevelUp = false;
                    a.RestoreAmount = true;
                    a.Amount = 0;
                }),
                Helpers.Create<PrerequisiteFeature>(a => {
                    a.Feature = GreaterExploits.feat;
                }));
            exploit.SetName(name);
            exploit.SetDescription(desc);

            List<BlueprintAbility> variants = new List<BlueprintAbility>();
            List<BlueprintFeature> features = new List<BlueprintFeature>();
            foreach (var kv in MetaFeats.dict) {
                Metamagic metaId = (Metamagic)(kv.Key);
                BlueprintFeature metaFeat = library.Get<BlueprintFeature>(kv.Value);
                features.Add(metaFeat);

                string buff_i_name = $"ArcanistClassExploitGreaterMK{(int)metaId}SubBuff";
                var buff_i = Helpers.CreateBuff(buff_i_name, "buff", "",
                    OtherUtils.GetMd5(buff_i_name),
                    IconSet.metamagic,
                    null,
                    Helpers.Create<BuffChangeSingleSelectedFeature>(a => {
                        a.newFeatBlue = metaFeat;
                        a.selectionBlue = exploit;
                    })
                    );
                buff_i.SetBuffFlags(buff_i.GetBuffFlags() | BuffFlags.RemoveOnRest | BuffFlags.RemoveOnResurrect | BuffFlags.HiddenInUi);
                subBuffs.Add(buff_i);

                string abl_i_name = $"ArcanistClassExploitGreaterMK{(int)metaId}SubAbl";
                var abl_i = Helpers.CreateAbility(abl_i_name, "", "",
                    OtherUtils.GetMd5(abl_i_name),
                    metaFeat.Icon,
                    AbilityType.Special,
                    UnitCommand.CommandType.Free,
                    AbilityRange.Personal,
                    "", "",
                    Helpers.Create<AbilityEffectRunAction>(a => a.Actions = new ActionList {
                        Actions = new GameAction[] {
                            Helpers.Create<ContextActionApplyBuff>(b => {
                                b.Buff = buff_i;
                                b.UseDurationSeconds = true;
                                b.DurationSeconds = 9999;
                                b.Permanent = true;
                            })
                        }
                    }),
                    
                    Helpers.Create<AbilityRequirementFeature>(a => {
                        a.Feat = metaFeat;
                        a.Not = true;
                    }),
                    Helpers.Create<AbilityRequirementFeatureCanBeChosen>(a => {
                        a.feat = metaFeat;
                        a.Not = false;
                    }),
                    Helpers.Create<AbilityResourceLogic>(a => {
                        a.Amount = 1;
                        a.CostIsCustom = false;
                        a.IsSpendResource = true;
                        a.RequiredResource = resource;
                    }));
                abl_i.SetName(metaFeat.GetName());
                abl_i.SetDescription(metaFeat.GetDescription());
                abl_i.LocalizedDuration = PresetLocStrings.loc_instant;
                variants.Add(abl_i);
            }
            var abl = Helpers.CreateAbility("ArcanistClassExploitGreaterMKAbl", "", "",
                    "4513a6437121b4956a6012dcf05dfc9e",//MD5-32[ArcanistClass.Exploit.GreaterMagicKnowledge.Abl]
                    IconSet.metamagic,
                    AbilityType.Special,
                    UnitCommand.CommandType.Free,
                    AbilityRange.Personal,
                    "", "",
                    
                    Helpers.Create<AbilityResourceLogic>(a => {
                        a.Amount = 1;
                        a.CostIsCustom = false;
                        a.IsSpendResource = true;
                        a.RequiredResource = resource;
                    }));//the 1 arcane reservoir point is spent in buff_i.OnTurnOn()
            abl.SetName(name);
            abl.SetDescription(desc);
            abl.AddComponent(abl.CreateAbilityVariants(variants));

            exploit.AddComponent(abl.CreateAddFact());
            exploit.SetFeatures(features);
            return exploit;
        }
    }
}
